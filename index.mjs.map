{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport prevGraphemeClusterBreak from '@stdlib/string-prev-grapheme-cluster-break' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates from right to left over each grapheme cluster in a string.\n*\n* @param {string} src - input value\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = graphemeClusters2iteratorRight( '🌷🍕' );\n*\n* var v = iter.next().value;\n* // returns '🍕'\n*\n* v = iter.next().value;\n* // returns '🌷'\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction graphemeClusters2iteratorRight( src ) { // eslint-disable-line id-length\n\tvar thisArg;\n\tvar iter;\n\tvar FLG;\n\tvar fcn;\n\tvar i;\n\tif ( !isString( src ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be astring. Value: `%s`.', src ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tfcn = arguments[ 1 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( format( 'null2S', fcn ) );\n\t\t}\n\t\tthisArg = arguments[ 2 ];\n\t}\n\ti = src.length - 1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tif ( fcn ) {\n\t\tsetReadOnly( iter, 'next', next1 );\n\t} else {\n\t\tsetReadOnly( iter, 'next', next2 );\n\t}\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar v;\n\t\tvar j;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj = prevGraphemeClusterBreak( src, i );\n\t\tif ( j === -1 ) {\n\t\t\tFLG = true;\n\t\t\tif ( src.length ) {\n\t\t\t\treturn {\n\t\t\t\t\t'value': fcn.call( thisArg, src.substring( j+1, i+1 ), j+1, src ),\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = fcn.call( thisArg, src.substring( j+1, i+1 ), j+1, src );\n\t\ti = j;\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar v;\n\t\tvar j;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj = prevGraphemeClusterBreak( src, i );\n\t\tif ( j === -1 ) {\n\t\t\tFLG = true;\n\t\t\tif ( src.length ) {\n\t\t\t\treturn {\n\t\t\t\t\t'value': src.substring( j+1, i+1 ),\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = src.substring( j+1, i+1 );\n\t\ti = j;\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tif ( fcn ) {\n\t\t\treturn graphemeClusters2iteratorRight( src, fcn, thisArg );\n\t\t}\n\t\treturn graphemeClusters2iteratorRight( src );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default graphemeClusters2iteratorRight;\n"],"names":["graphemeClusters2iteratorRight","src","thisArg","iter","FLG","fcn","i","isString","TypeError","format","arguments","length","isFunction","setReadOnly","next1","next2","end","iteratorSymbol","factory","v","j","done","prevGraphemeClusterBreak","value","call","substring"],"mappings":";;okBAsDA,SAASA,EAAgCC,GACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,iEAAkER,IAEhG,GAAKS,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNP,EAAMK,UAAW,IAEhB,MAAM,IAAIF,UAAWC,EAAQ,SAAUJ,IAExCH,EAAUQ,UAAW,EACrB,CAgBD,OAfAJ,EAAIL,EAAIU,OAAS,EAKhBE,EAFDV,EAAO,CAAA,EAEa,OADfE,EACuBS,EAEAC,GAE5BF,EAAaV,EAAM,SAAUa,GAGxBC,GACJJ,EAAaV,EAAMc,EAAgBC,GAE7Bf,EAQP,SAASW,IACR,IAAIK,EACAC,EACJ,OAAKhB,EACG,CACNiB,MAAQ,IAIE,KADZD,EAAIE,EAA0BrB,EAAKK,KAElCF,GAAM,EACDH,EAAIU,OACD,CACNY,MAASlB,EAAImB,KAAMtB,EAASD,EAAIwB,UAAWL,EAAE,EAAGd,EAAE,GAAKc,EAAE,EAAGnB,GAC5DoB,MAAQ,GAGH,CACNA,MAAQ,KAGVF,EAAId,EAAImB,KAAMtB,EAASD,EAAIwB,UAAWL,EAAE,EAAGd,EAAE,GAAKc,EAAE,EAAGnB,GACvDK,EAAIc,EACG,CACNG,MAASJ,EACTE,MAAQ,GAET,CAQD,SAASN,IACR,IAAII,EACAC,EACJ,OAAKhB,EACG,CACNiB,MAAQ,IAIE,KADZD,EAAIE,EAA0BrB,EAAKK,KAElCF,GAAM,EACDH,EAAIU,OACD,CACNY,MAAStB,EAAIwB,UAAWL,EAAE,EAAGd,EAAE,GAC/Be,MAAQ,GAGH,CACNA,MAAQ,KAGVF,EAAIlB,EAAIwB,UAAWL,EAAE,EAAGd,EAAE,GAC1BA,EAAIc,EACG,CACNG,MAASJ,EACTE,MAAQ,GAET,CASD,SAASL,EAAKO,GAEb,OADAnB,GAAM,EACDM,UAAUC,OACP,CACNY,MAASA,EACTF,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASH,IACR,OAAKb,EACGL,EAAgCC,EAAKI,EAAKH,GAE3CF,EAAgCC,EACvC,CACF"}